package fast_test

import (
	"fmt"
	"testing"

	"github.com/relab/bbhash/internal/fast"
)

func TestHash64(t *testing.T) {
	testCases64 := []struct {
		in   string
		want uint64
	}{
		{"0", 7749275010220701263},
		{"01", 10872400197931041294},
		{"012", 15346974464947871338},
		{"0123", 4981619345643336833},
		{"01234", 13689749573412676407},
		{"012345", 12368623765455266986},
		{"0123456", 12533847505615611486},
		{"01234567", 7278149109652352471},
		{"012345678", 732621452303077734},
		{"0123456789", 11460214490870572832},
		{"01234567890", 17034508007883094207},
		{"012345678901", 2613408247548219540},
		{"0123456789012", 9592538707932359806},
		{"01234567890123", 8026059100768657110},
		{"012345678901234", 10326712318572838968},
		{"0123456789012345", 8542297193267372205},
		{"01234567890123456", 9007936939456149167},
		{"012345678901234567", 4883792730719261022},
		{"0123456789012345678", 13174688786326369759},
		{"01234567890123456789", 4588891807043452244},
	}
	for _, tc := range testCases64 {
		got := fast.Hash64(0, []byte(tc.in))
		if got != tc.want {
			t.Errorf("Hash64(0, %q): want %d, got %d", tc.in, tc.want, got)
		}
	}
}

func BenchmarkHash64(b *testing.B) {
	sizes := []int{256, 512, 1024, 2048, 4096, 8192, 16384, 32768}
	for _, size := range sizes {
		buf := make([]byte, size)
		b.Run(fmt.Sprintf("size=%d", size), func(b *testing.B) {
			b.SetBytes(int64(size))
			for range b.N {
				fast.Hash64(0, buf)
			}
		})
	}
}
